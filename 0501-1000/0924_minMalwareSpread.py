class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, a):
        while a != self.parent[a]:
            a = self.parent[a]
        return a
    
    def union(self, a, b):
        ra = self.find(a)
        rb = self.find(b)

        if self.rank[ra] > self.rank[rb]:
            self.parent[rb] = ra
        elif self.rank[ra] < self.rank[rb]:
            self.parent[ra] = rb
        else:
            self.rank[ra] += 1
            self.parent[rb] = ra


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        parents = {}
        infectedGroup = defaultdict(list)
        decreased, output = 0, None

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)
                
        for i in range(n):
            p = uf.find(i)
            if p not in parents:
                parents[p] = set()
            parents[p].add(i)
                
        for node in initial:
            p = uf.find(node)
            infectedGroup[p].append(node)
                
        for parent, infected in infectedGroup.items():
            if len(infected) == 1:
                node = infected[0]
                p = uf.find(node)
                if len(parents[p]) > decreased:
                    decreased = len(parents[p])
                    output = node
                elif len(parents[p]) == decreased and node < output:
                    output = node
            
        if output == None:
            output = min(initial)
        
        return output
