class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, a):
        while a != self.parent[a]:
            a = self.parent[a]
        return a
    
    def union(self, a, b):
        ra = self.find(a)
        rb = self.find(b)

        if self.rank[ra] > self.rank[rb]:
            self.parent[rb] = ra
        elif self.rank[ra] < self.rank[rb]:
            self.parent[ra] = rb
        else:
            self.rank[ra] += 1
            self.parent[rb] = ra


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        output = None
        resultant = float('inf')
        
        for node in initial:
            temp_graph = deepcopy(graph)
            for i in range(n):
                if i != node:
                    temp_graph[node][i] = 0
            for j in range(n):
                if j != node:
                    temp_graph[j][node] = 0

            new_res = self.unionius_finder(temp_graph, initial, node)

            if resultant > new_res:
                resultant = new_res
                output = node
            elif resultant == new_res:
                output = min(output, node)
        
        return output

    def unionius_finder(self, graph, initial, uncared):
        n = len(graph)
        uf = UnionFind(n)
        parents = {}
        infectedGroup = defaultdict(list)

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)

        for i in range(n):
            p = uf.find(i)
            if p not in parents:
                parents[p] = set()
            parents[p].add(i)

        for node in initial:
            if node != uncared:
                p = uf.find(node)
                infectedGroup[p].append(node)
        
        return sum(len(parents[k]) for k, v in infectedGroup.items())
